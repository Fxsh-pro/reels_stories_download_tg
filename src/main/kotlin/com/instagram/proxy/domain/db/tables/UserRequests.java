/*
 * This file is generated by jOOQ.
*/
package com.instagram.proxy.domain.db.tables;


import com.instagram.proxy.domain.db.Indexes;
import com.instagram.proxy.domain.db.Keys;
import com.instagram.proxy.domain.db.Public;
import com.instagram.proxy.domain.db.tables.records.UserRequestsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRequests extends TableImpl<UserRequestsRecord> {

    private static final long serialVersionUID = 1599133247;

    /**
     * The reference instance of <code>PUBLIC.USER_REQUESTS</code>
     */
    public static final UserRequests USER_REQUESTS = new UserRequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRequestsRecord> getRecordType() {
        return UserRequestsRecord.class;
    }

    /**
     * The column <code>PUBLIC.USER_REQUESTS.ID</code>.
     */
    public final TableField<UserRequestsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.MESSAGE_ID</code>.
     */
    public final TableField<UserRequestsRecord, Integer> MESSAGE_ID = createField("MESSAGE_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.CHAT_ID</code>.
     */
    public final TableField<UserRequestsRecord, Integer> CHAT_ID = createField("CHAT_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.SENDER_ID</code>.
     */
    public final TableField<UserRequestsRecord, Integer> SENDER_ID = createField("SENDER_ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.FIRST_NAME</code>.
     */
    public final TableField<UserRequestsRecord, String> FIRST_NAME = createField("FIRST_NAME", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.LAST_NAME</code>.
     */
    public final TableField<UserRequestsRecord, String> LAST_NAME = createField("LAST_NAME", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.USER_NAME</code>.
     */
    public final TableField<UserRequestsRecord, String> USER_NAME = createField("USER_NAME", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.MESSAGE_TEXT</code>.
     */
    public final TableField<UserRequestsRecord, String> MESSAGE_TEXT = createField("MESSAGE_TEXT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>PUBLIC.USER_REQUESTS.CREATED_TS</code>.
     */
    public final TableField<UserRequestsRecord, Long> CREATED_TS = createField("CREATED_TS", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>PUBLIC.USER_REQUESTS</code> table reference
     */
    public UserRequests() {
        this(DSL.name("USER_REQUESTS"), null);
    }

    /**
     * Create an aliased <code>PUBLIC.USER_REQUESTS</code> table reference
     */
    public UserRequests(String alias) {
        this(DSL.name(alias), USER_REQUESTS);
    }

    /**
     * Create an aliased <code>PUBLIC.USER_REQUESTS</code> table reference
     */
    public UserRequests(Name alias) {
        this(alias, USER_REQUESTS);
    }

    private UserRequests(Name alias, Table<UserRequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserRequests(Name alias, Table<UserRequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRequestsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_USER_REQUESTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRequestsRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRequestsRecord>>asList(Keys.CONSTRAINT_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRequests as(String alias) {
        return new UserRequests(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserRequests as(Name alias) {
        return new UserRequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRequests rename(String name) {
        return new UserRequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserRequests rename(Name name) {
        return new UserRequests(name, null);
    }
}
